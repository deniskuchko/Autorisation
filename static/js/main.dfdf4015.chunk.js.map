{"version":3,"sources":["serviceWorker.js","api/tokenManager.js","api/hosts.js","api/ApiClient.js","api/index.js","redux/reducers/auth-reducer.js","redux/actions.js","redux/redux-store.js","components/Profile/Profile.jsx","components/Profile/index.js","components/common/FormsControls/FormsControls.jsx","utils/validators.js","components/Login/Login.jsx","components/Login/index.js","App.js","index.js","components/common/FormsControls/FormsControls.module.css"],"names":["Boolean","window","location","hostname","match","accessToken","TAGER","uri","options","method","headers","getToken","email","password","a","fetch","body","JSON","stringify","clientId","result","json","errors","alert","message","get","ApiClient","api","this","host","url","path","request","Authorization","Accept","userApi","initialState","user","name","loginForm","isButtonDisabled","setLoginFormState","payload","type","authReducer","state","action","reducers","combineReducers","auth","form","formReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","Meta","Card","Profile","logout","style","width","cover","alt","src","avatar","title","description","onClick","disabled","to","defaultProps","undefined","Element","connect","dispatch","post","createFields","placeholder","component","validate","props","text","Field","emailPattern","required","value","validateEmail","test","Inputs","Input","input","meta","touched","error","hasError","className","s","formControl","LoginForm","handleSubmit","onSubmit","formSummaryError","LoginReduxForm","reduxForm","Login","login","userEmail","isEmpty","App","exact","render","React","Component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.dfdf4015.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import get from \"lodash/get\";\nimport { TAGER } from \"./hosts\";\n\nlet accessToken;\nconst clientId = 1;\nconst uri = `${TAGER}/api/auth/user`;\nconst options = {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" }\n};\n\nexport const getToken = async (email, password) => {\n  if (accessToken) {\n    // also should be checked for expiration, but not in this implementation\n    return accessToken;\n  }\n\n  if (!email || !password) {\n    return null;\n  }\n\n  let result = await fetch(uri, {\n    ...options,\n    body: JSON.stringify({ email, password, clientId })\n  });\n  result = await result.json();\n  if (result.errors) {\n    alert(result.message);\n  }\n\n  accessToken = get(result, \"data.accessToken\", null);\n\n  return accessToken;\n};\n\nexport const dropToken = () => {\n  accessToken = null;\n};\n","export const TAGER = \"https://tager.dev.ozitag.com\";\n","import { TAGER } from \"./hosts\";\nimport { getToken } from \"./tokenManager\";\n\nexport class ApiClient {\n  constructor(api) {\n    this.host = TAGER;\n    this.api = api;\n    this.url = `${this.host}${this.api}`;\n  }\n\n  static async request(url, options = {}) {\n    const accessToken = await getToken();\n    let result = await fetch(url, {\n      ...options,\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        ...options.headers\n      }\n    });\n    result = await result.json();\n\n    return result;\n  }\n\n  get(path, options) {\n    return ApiClient.request(`${this.url}${path}`, {\n      ...options,\n      method: \"GET\"\n    });\n  }\n\n  post(path, options) {\n    return ApiClient.request(`${this.url}${path}`, {\n      ...options,\n      method: \"POST\"\n    });\n  }\n}\n","import { ApiClient } from \"./ApiClient\";\n\nexport const authApi = new ApiClient(\"/api/auth\");\nexport const userApi = new ApiClient(\"/api/tager/user\");\n","import get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport { userApi } from \"../../api\";\nimport { getToken, dropToken } from \"../../api/tokenManager\";\nimport { SET_USER_DATA, SET_LOGIN_FORM_STATE } from \"../actions\";\n\nconst initialState = {\n  user: { name: null, email: null },\n  loginForm: { isButtonDisabled: false }\n};\n\nconst authReducer = (state = initialState, action) => {\n  const { payload, type } = action;\n\n  switch (type) {\n    case SET_USER_DATA:\n      return {\n        ...state,\n        user: payload\n      };\n    case SET_LOGIN_FORM_STATE:\n      return {\n        ...state,\n        loginForm: payload\n      };\n\n    default:\n      return { ...state };\n  }\n};\n\nconst setLoginFormState = (payload) => ({\n  type: SET_LOGIN_FORM_STATE,\n  payload: { isButtonDisabled: payload }\n});\n\nexport const login = (email, password) => async (dispatch) => {\n  dispatch(setLoginFormState(true));\n  try {\n    await getToken(email, password);\n\n    const result = await userApi.get(\"/profile\");\n    const user = get(result, \"data\", {});\n\n    if (!isEmpty(user)) {\n      dispatch({\n        type: SET_USER_DATA,\n        payload: user\n      });\n    }\n  } catch (err) {\n    alert(err);\n    dispatch({\n      type: SET_LOGIN_FORM_STATE,\n      payload: { isButtonDisabled: true }\n    });\n  }\n  dispatch(setLoginFormState(false));\n};\n\nexport const logout = () => async (dispatch) => {\n  dispatch(setLoginFormState(true));\n\n  try {\n    await userApi.post(\"/profile/logout\");\n    dropToken();\n    dispatch({\n      type: SET_USER_DATA,\n      payload: { name: null, email: null }\n    });\n  } catch (err) {\n    alert(err);\n  }\n  dispatch(setLoginFormState(false));\n};\n\nexport default authReducer;\n","export const SET_USER_DATA = \"SET_USER_DATA\";\nexport const SET_LOGIN_FORM_STATE = \"SET_LOGIN_STATE\";\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\n\nimport authReducer from \"./reducers/auth-reducer\";\n\nconst reducers = combineReducers({\n  auth: authReducer,\n  form: formReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(thunkMiddleWare))\n);\n\nexport default store;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Card, Avatar, Button } from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst { Meta } = Card;\n\nexport const Profile = ({ name, email, isButtonDisabled, logout }) => {\n  if (!name) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <div>\n      <div>\n        <Card\n          name={name}\n          email={email}\n          style={{ width: 300 }}\n          cover={\n            <img\n              alt=\"example\"\n              src=\"https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png\"\n            />\n          }\n        >\n          <Meta\n            avatar={\n              <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n            }\n            title={name}\n            description={email}\n          />\n        </Card>\n        <br />\n      </div>\n      <Button type=\"primary\" onClick={logout} disabled={isButtonDisabled}>\n        {name ? \"Exit\" : \"false\"}\n      </Button>\n    </div>\n  );\n};\n\nProfile.propTypes = {\n  name: PropTypes.string,\n  email: PropTypes.string,\n  isButtonDisabled: PropTypes.bool,\n  logout: PropTypes.func.isRequired\n};\nProfile.defaultProps = {\n  name: undefined,\n  email: undefined,\n  isButtonDisabled: false\n};\n","// index.js files should be used as interfaces\nimport { connect } from \"react-redux\";\nimport { logout } from \"../../redux/reducers/auth-reducer\";\n\nimport { Profile } from \"./Profile\";\n\nconst mapStateToProps = (state) => ({\n  name: state.auth.user.name,\n  email: state.auth.user.email,\n  isButtonDisabled: state.auth.loginForm.isButtonDisabled\n});\n\nexport default connect(mapStateToProps, { logout })(Profile);\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React from \"react\";\nimport { Field } from \"redux-form\";\nimport s from \"./FormsControls.module.css\";\n\nexport const FormControl = (Element) => ({\n  input,\n  meta: { touched, error },\n  ...props\n}) => {\n  const hasError = touched && error;\n  return (\n    <div className={`${s.formControl} ${hasError ? s.error : \"\"}`}>\n      <Element {...input} {...props} />\n\n      {hasError && <span>{error}</span>}\n    </div>\n  );\n};\nexport const createFields = (\n  placeholder,\n  name,\n  component,\n  validate,\n  props = {},\n  text = \"\"\n) => {\n  return (\n    <div>\n      <Field\n        placeholder={placeholder}\n        name={name}\n        component={component}\n        validate={validate}\n        {...props}\n      />\n      {text}\n    </div>\n  );\n};\n","const emailPattern = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/;\n\nexport const required = (value) => {\n  if (value) return undefined;\n  return \"Filed is required\";\n};\nexport const validateEmail = (value) =>\n  value && !emailPattern.test(value) ? \"Invalid email address\" : undefined;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Redirect } from \"react-router-dom\";\nimport { reduxForm } from \"redux-form\";\nimport { Input, Button } from \"antd\";\nimport {\n  FormControl,\n  createFields\n} from \"../common/FormsControls/FormsControls\";\n\nimport { required, validateEmail } from \"../../utils/validators\";\n\nimport style from \"../common/FormsControls/FormsControls.module.css\";\n\nconst Inputs = FormControl(Input);\n\n// jsx spaces should be defined as &nbsp\nconst LoginForm = ({ handleSubmit, error, isButtonDisabled }) => {\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        {createFields(\"Email\", \"email\", Inputs, [validateEmail])}\n        {createFields(\"Password\", \"password\", Inputs, [required], {\n          type: \"password\"\n        })}\n        {error && <div className={style.formSummaryError}>{error}</div>}\n        <div>\n          <Button\n            onClick={handleSubmit}\n            type=\"primary\"\n            disabled={isButtonDisabled}\n          >\n            Submit\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nLoginForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  error: PropTypes.shape({}),\n  isButtonDisabled: PropTypes.bool\n};\nLoginForm.defaultProps = {\n  error: undefined,\n  isButtonDisabled: false\n};\n\nconst LoginReduxForm = reduxForm({\n  form: \"login\"\n})(LoginForm);\n\nexport const Login = ({ login, userEmail, loginForm }) => {\n  const onSubmit = ({ email, password }) => {\n    login(email, password);\n  };\n  if (userEmail) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginReduxForm\n        onSubmit={onSubmit}\n        isButtonDisabled={loginForm.isButtonDisabled}\n        userEmail={userEmail}\n      />\n    </div>\n  );\n};\n\nLogin.propTypes = {\n  userEmail: PropTypes.string,\n  login: PropTypes.func.isRequired,\n  loginForm: PropTypes.shape({ isButtonDisabled: PropTypes.bool })\n};\nLogin.defaultProps = {\n  loginForm: { isButtonDisabled: false },\n  userEmail: undefined\n};\n","import { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { login } from \"../../redux/reducers/auth-reducer\";\nimport { Login } from \"./Login\";\n\nlet mapStateToProps = (state) => ({\n  userEmail: state.auth.user.email,\n  loginForm: state.auth.loginForm\n});\n\nexport default compose(connect(mapStateToProps, { login }))(Login);\n","import React from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport Login from \"./components/Login\";\n\nimport \"./App.css\";\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass App extends React.Component {\n  render() {\n    return (\n      // eslint-disable-next-line react/jsx-filename-extension\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" render={() => <Login />} />\n          <Route path=\"/profile\" render={() => <Profile />} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/redux-store\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__32zgx\",\"error\":\"FormsControls_error__1Fg0c\",\"formSummaryError\":\"FormsControls_formSummaryError__1S5x2\"};"],"sourceRoot":""}